%Start IN_COMMENT
%{
/*
	Analizador Lexico da Linguagem P++
	Equipe: Breno Cardoso, Lucas Simonetti, Renato Higor, Sidemar Fideles

	--Para compilar e executar
	lex lexicAnalizer.l
	cc lex.yy.c -ll -o lexicAnalyzer
	./lexicAnalyzer examples/arquivo.ppp
*/

	#include "symbolTable.h"
	int nchar, nline, nword;
	#define ACCOUNTABLE nword++;nchar+=yyleng;

%}

LETTER				[a-zA-Z]
DIGIT				[0-9]
NUMBER_INT			{DIGIT}+
NUMBER_REAL 			{NUMBER_INT}"."{NUMBER_INT}(e{NUMBER_INT})?
ID	 			({LETTER}|_)({LETTER}|{DIGIT}|_)*


%%

"/*"("*"|\n|[^"*/"])*"*/" { printf("%s: token COMMENT\n", yytext); ACCOUNTABLE } //Checar a quantidade de linhas

\n		{nline++;nchar++;}

"//".* { printf("%s: token COMMENT\n", yytext); ACCOUNTABLE } 

\"(\\.|[^\\"])*\" { printf("%s: token VAL_STRING\n", yytext); ACCOUNTABLE } 

procedure { printf("%s: token PROCEDURE\n", yytext); ACCOUNTABLE }
function { printf("%s: token FUNCTION\n", yytext); ACCOUNTABLE }

ref { printf("%s: token REF\n", yytext); ACCOUNTABLE }
var { printf("%s: token VAR\n", yytext); ACCOUNTABLE }
const { printf("%s: token CONST\n", yytext); ACCOUNTABLE }
int { printf("%s: token INT\n", yytext); ACCOUNTABLE }
real { printf("%s: token REAL\n", yytext); ACCOUNTABLE }
string { printf("%s: token STRING\n", yytext); ACCOUNTABLE }
boolean { printf("%s: token BOOLEAN\n", yytext); ACCOUNTABLE }

true { printf("%s: token TRUE\n", yytext); ACCOUNTABLE }
false { printf("%s: token FALSE\n", yytext); ACCOUNTABLE }

null {printf("%s: token NULL \n", yytext); ACCOUNTABLE }
 
begin { printf("%s: token BEGIN\n", yytext); ACCOUNTABLE }
end { printf("%s: token END\n", yytext); ACCOUNTABLE }

return { printf("%s: token RETURN\n", yytext); ACCOUNTABLE }
break { printf("%s: token BREAK\n", yytext); ACCOUNTABLE }
if { printf("%s: token IF\n", yytext); ACCOUNTABLE }
then { printf("%s: token THEN\n", yytext); ACCOUNTABLE }
else { printf("%s: token ELSE\n", yytext); ACCOUNTABLE }
switch { printf("%s: token SWITCH\n", yytext); ACCOUNTABLE }
case { printf("%s: token CASE\n", yytext); ACCOUNTABLE }
default { printf("%s: token DEFAULT\n", yytext); ACCOUNTABLE }
for { printf("%s: token FOR\n", yytext); ACCOUNTABLE }
downto { printf("%s: token DOWNTO\n", yytext); ACCOUNTABLE }
to { printf("%s: token TO\n", yytext); ACCOUNTABLE }
do { printf("%s: token DO\n", yytext); ACCOUNTABLE }
loop { printf("%s: token LOOP\n", yytext); ACCOUNTABLE }
exit { printf("%s: token EXIT\n", yytext); ACCOUNTABLE }
when { printf("%s: token WHEN\n", yytext); ACCOUNTABLE }

{ID} { printf("%s: token ID \n", yytext); push(yytext, "indef", 0, 0, head); ACCOUNTABLE }
{NUMBER_INT} { printf("%s: token NUMBER_INT \n", yytext); ACCOUNTABLE }
{NUMBER_REAL} { printf("%s: token NUMBER_REAL \n", yytext); ACCOUNTABLE }

";" { printf("%s: token SEMICOLON\n ", yytext); ACCOUNTABLE }	
"," { printf("%s: token COMMA \n", yytext); ACCOUNTABLE }		
"."	{ printf("%s: token DOT\n", yytext); ACCOUNTABLE }		
"(" { printf("%s: token OPEN_PARENTHESIS\n", yytext); ACCOUNTABLE }
")"	{ printf("%s: token CLOSE_PARENTHESIS\n", yytext); ACCOUNTABLE }
"[" { printf("%s: token OPEN_BRACKETS\n", yytext); ACCOUNTABLE }
"]" { printf("%s: token CLOSE_BRACKETS\n", yytext); ACCOUNTABLE }
"{" { printf("%s: token OPEN_BRACES\n", yytext); ACCOUNTABLE }
"}" { printf("%s: token CLOSE_BRACES\n", yytext); ACCOUNTABLE }


"+" { printf("%s: token ADD\n", yytext); ACCOUNTABLE }
"-" { printf("%s: token SUB\n", yytext); ACCOUNTABLE }
"*" { printf("%s: token MULT\n", yytext); ACCOUNTABLE }	
"/" { printf("%s: token DIV\n", yytext); ACCOUNTABLE  }
"=" { printf("%s: token EQUAL\n", yytext); ACCOUNTABLE }
"%" { printf("%s: token MOD\n", yytext); ACCOUNTABLE }
"!" { printf("%s: token NEG\n", yytext); ACCOUNTABLE }
"||" { printf("%s: token OR\n", yytext); ACCOUNTABLE }
"&&" { printf("%s: token AND\n", yytext); ACCOUNTABLE }
"<" { printf("%s: token LESS_THEN\n", yytext); ACCOUNTABLE }
">" { printf("%s: token BIGGER_THEN\n", yytext); ACCOUNTABLE }
"==" { printf("%s: token EQUAL_LOGIC\n", yytext); ACCOUNTABLE }
"!=" { printf("%s: token NOT_EQUAL\n", yytext); ACCOUNTABLE }
"<=" { printf("%s: token LESS_EQUAL\n", yytext); ACCOUNTABLE }
">=" { printf("%s: token BIGGER_EQUAL\n", yytext); ACCOUNTABLE }
"++" { printf("%s: token INCREMENT\n", yytext); ACCOUNTABLE }
"--" { printf("%s: token DECREMENT\n", yytext); ACCOUNTABLE }





.		{nchar++;}


%%

int main(argc,argv)
int argc;
char **argv;
{

	Tabela *head = (Tabela*) malloc(sizeof(Tabela));
	if (argc > 1) {
		FILE *file;

		file = fopen(argv[1], "r");
		if (!file) {
			fprintf(stderr,"could not open %s\n",argv[1]);
			exit(1);
		}
		yyin = file;
	}

	yylex();

	printf("\ncaracteres %d; linhas: %d; palavras: %d;",nchar, nline, nword);

	return 0;
}

int yywrap()
{
	return(1);
}
